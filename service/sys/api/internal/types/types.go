// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package types

type CaptchaInfo struct {
	CaptchaId string `json:"captchaId"`
	ImgPath   string `json:"imgPath"`
}

type CaptchaRes struct {
	CaptchaInfo
}

type LoginInfo struct {
	UserId uint64 `json:"userId"` // 用户id
	Token  string `json:"token"`  // 和前端交互的token
	Expire uint64 `json:"expire"` // 过期时间戳
}

type LoginReq struct {
	Username  string `json:"username" validate:"required,max=15"`       // 登录名称
	Password  string `json:"password" validate:"required,max=30,min=6"` // 密码
	CaptchaId string `json:"captchaId"  validate:"required,len=20"`     // 验证码id
	Captcha   string `json:"captcha" validate:"required,len=5"`         //验证码
}

type LoginRes struct {
	LoginInfo
}

type MenuInfo struct {
	Model
	Meta        Meta   `json:"meta"`                 // 菜单meta数据
	Trans       string `json:"trans,optional"`       // 国际化展示名称
	Level       uint64 `json:"level,optional"`       // 菜单层级
	ParentId    uint64 `json:"parentId,optional"`    // 父级菜单ID
	Path        string `json:"path,optional"`        // 菜单访问路径
	Name        string `json:"name,optional"`        // 菜单名称
	Redirect    string `json:"redirect,optional"`    // 跳转地址
	Component   string `json:"component,optional"`   // 组件地址
	Sort        uint64 `json:"sort,optional"`        // 排序
	Disabled    bool   `json:"disabled,optional"`    // 是否启用
	MenuType    uint64 `json:"menuType,optional"`    // 菜单类型
	ServiceName string `json:"serviceName,optional"` // 服务名称
	Permission  string `json:"permission,optional"`  // 权限标识
}

type MenuListRes struct {
	List []MenuInfo `json:"data"`
}

type Meta struct {
	Title              string `json:"title" validate:"max=50"`                                  // 菜单显示名
	Icon               string `json:"icon" validate:"max=50"`                                   // 菜单图标
	HideMenu           bool   `json:"hideMenu" validate:"omitempty,boolean"`                    // 隐藏菜单
	HideBreadcrumb     bool   `json:"hideBreadcrumb,optional" validate:"omitempty,boolean"`     // 隐藏面包屑
	IgnoreKeepAlive    bool   `json:"ignoreKeepAlive,optional" validate:"omitempty,boolean"`    // 不缓存Tab
	HideTab            bool   `json:"hideTab,optional" validate:"omitempty,boolean"`            // 当前路由不在标签页显示
	FrameSrc           string `json:"frameSrc,optional"`                                        // 内嵌iframe的地址
	CarryParam         bool   `json:"carryParam,optional" validate:"omitempty,boolean"`         // 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
	HideChildrenInMenu bool   `json:"hideChildrenInMenu,optional" validate:"omitempty,boolean"` // 隐藏所有子菜单
	Affix              bool   `json:"affix,optional" validate:"omitempty,boolean"`              // 是否固定标签
	DynamicLevel       uint64 `json:"dynamicLevel" validate:"number,lt=30"`                     // 动态路由可打开Tab页数
	RealPath           string `json:"realPath,optional"`                                        // 动态路由的实际Path, 即去除路由的动态部分
}

type Model struct {
	ID        int64  `json:"id,optional"`
	CreatedAt string `json:"createdAt,optional"`
	UpdatedAt string `json:"updatedAt,optional"`
	DeletedAt string `json:"deletedAt,optional"`
}

type PageInfo struct {
	PageNo   uint64 `json:"pageno,optional" validate:"required,number,gt=0"`
	PageSize uint64 `json:"pageSize,optional" validate:"required,number,lt=100000"`
	Cursor   uint64 `json:"cursor,optional"`
}

type PermCodeRes struct {
	Data []uint64 `json:"data"`
}

type RoleInfo struct {
	Model
	Trans  string `json:"trans,optional"`                                     // 展示名称
	Status uint64 `json:"status,optional" validate:"omitempty,lt=20"`         // 状态
	Name   string `json:"name,optional" validate:"omitempty,max=30"`          // 角色名称
	Code   string `json:"code,optional" validate:"omitempty,max=15,alphanum"` // 角色码 -- 预留 目前用角色id匹配 真正的角色
	Remark string `json:"remark,optional" validate:"omitempty,max=200"`       // 备注
	Sort   uint64 `json:"sort,optional" validate:"omitempty,lt=10000"`        // 排序
}

type RoleListReq struct {
	PageInfo
	Name string `json:"name,optional"` // 角色名称
}

type RoleListRes struct {
	List   []RoleInfo `json:"list"`
	Total  uint64     `json:"total"`
	Cursor uint64     `json:"cursor"`
}

type UserBaseIDInfoRes struct {
	UserInfo
}

type UserInfo struct {
	Id             uint64   `json:"userId"`                  // 用户id
	Username       string   `json:"username"`                //用户名
	Nickname       string   `json:"nickname"`                //用户的昵称
	Avatar         string   `json:"avatar"`                  // 用户的头像路径
	HomePath       string   `json:"homePath"`                // 用户登陆后进入的首页
	Description    string   `json:"desc"`                    // 用户的描述信息
	RoleName       []string `json:"roleName"`                // 用户的角色名称
	DepartmentName string   `json:"departmentName,optional"` // 部门名称
}
