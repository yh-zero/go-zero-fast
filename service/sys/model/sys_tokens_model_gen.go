// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysTokensFieldNames          = builder.RawFieldNames(&SysTokens{})
	sysTokensRows                = strings.Join(sysTokensFieldNames, ",")
	sysTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(sysTokensFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(sysTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysTokensIdPrefix    = "cache:goZeroFast:sysTokens:id:"
	cacheGoZeroFastSysTokensTokenPrefix = "cache:goZeroFast:sysTokens:token:"
)

type (
	sysTokensModel interface {
		Insert(ctx context.Context, data *SysTokens) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysTokens, error)
		FindOneByToken(ctx context.Context, token string) (*SysTokens, error)
		Update(ctx context.Context, data *SysTokens) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysTokensModel struct {
		sqlc.CachedConn
		table string
	}

	SysTokens struct {
		Id        uint64    `db:"id"`         // 雪花算法ID（64位整型）
		Status    uint64    `db:"status"`     // 状态:1正常/2禁用
		UserId    uint64    `db:"user_id"`    // 用户的id
		Username  string    `db:"username"`   // 用户名
		Token     string    `db:"token"`      // Token 字符串
		Source    string    `db:"source"`     // Token 来源（local, 第三方如github等）
		ExpiredAt time.Time `db:"expired_at"` // 过期时间
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 修改时间
	}
)

func newSysTokensModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysTokensModel {
	return &defaultSysTokensModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_tokens`",
	}
}

func (m *defaultSysTokensModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastSysTokensIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensIdPrefix, id)
	goZeroFastSysTokensTokenKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysTokensIdKey, goZeroFastSysTokensTokenKey)
	return err
}

func (m *defaultSysTokensModel) FindOne(ctx context.Context, id uint64) (*SysTokens, error) {
	goZeroFastSysTokensIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensIdPrefix, id)
	var resp SysTokens
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTokensRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysTokensModel) FindOneByToken(ctx context.Context, token string) (*SysTokens, error) {
	goZeroFastSysTokensTokenKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensTokenPrefix, token)
	var resp SysTokens
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysTokensTokenKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `token` = ? limit 1", sysTokensRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, token); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysTokensModel) Insert(ctx context.Context, data *SysTokens) (sql.Result, error) {
	goZeroFastSysTokensIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensIdPrefix, data.Id)
	goZeroFastSysTokensTokenKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensTokenPrefix, data.Token)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysTokensRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Status, data.UserId, data.Username, data.Token, data.Source, data.ExpiredAt)
	}, goZeroFastSysTokensIdKey, goZeroFastSysTokensTokenKey)
	return ret, err
}

func (m *defaultSysTokensModel) Update(ctx context.Context, newData *SysTokens) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastSysTokensIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensIdPrefix, data.Id)
	goZeroFastSysTokensTokenKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensTokenPrefix, data.Token)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysTokensRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Status, newData.UserId, newData.Username, newData.Token, newData.Source, newData.ExpiredAt, newData.Id)
	}, goZeroFastSysTokensIdKey, goZeroFastSysTokensTokenKey)
	return err
}

func (m *defaultSysTokensModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysTokensIdPrefix, primary)
}

func (m *defaultSysTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTokensRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysTokensModel) tableName() string {
	return m.table
}
