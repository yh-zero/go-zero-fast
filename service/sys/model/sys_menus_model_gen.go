// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenusFieldNames          = builder.RawFieldNames(&SysMenus{})
	sysMenusRows                = strings.Join(sysMenusFieldNames, ",")
	sysMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysMenusIdPrefix   = "cache:goZeroFast:sysMenus:id:"
	cacheGoZeroFastSysMenusNamePrefix = "cache:goZeroFast:sysMenus:name:"
	cacheGoZeroFastSysMenusPathPrefix = "cache:goZeroFast:sysMenus:path:"
)

type (
	sysMenusModel interface {
		Insert(ctx context.Context, data *SysMenus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenus, error)
		FindOneByName(ctx context.Context, name string) (*SysMenus, error)
		FindOneByPath(ctx context.Context, path string) (*SysMenus, error)
		Update(ctx context.Context, data *SysMenus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysMenusModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenus struct {
		Id                 int64          `db:"id"`                    // id
		Sort               uint64         `db:"sort"`                  // 排序编号
		MenuLevel          uint64         `db:"menu_level"`            // 菜单层级
		MenuType           uint64         `db:"menu_type"`             // 菜单类型 （菜单或目录）0 目录 1 菜单
		Path               string         `db:"path"`                  // 菜单路由路径
		Name               string         `db:"name"`                  // 菜单名称
		Redirect           string         `db:"redirect"`              // 跳转路径 （外链）
		Component          string         `db:"component"`             // 组件路径
		Disabled           int64          `db:"disabled"`              // 是否停用
		ServiceName        string         `db:"service_name"`          // 服务名称
		Permission         sql.NullString `db:"permission"`            // 权限标识
		Title              string         `db:"title"`                 // 菜单显示标题
		Icon               string         `db:"icon"`                  // 菜单图标
		HideMenu           int64          `db:"hide_menu"`             // 是否隐藏菜单
		HideBreadcrumb     int64          `db:"hide_breadcrumb"`       // 隐藏面包屑
		IgnoreKeepAlive    int64          `db:"ignore_keep_alive"`     // 取消页面缓存
		HideTab            int64          `db:"hide_tab"`              // 隐藏页头
		FrameSrc           string         `db:"frame_src"`             // 内嵌 iframe
		CarryParam         int64          `db:"carry_param"`           // 携带参数
		HideChildrenInMenu int64          `db:"hide_children_in_menu"` // 隐藏所有子菜单
		Affix              int64          `db:"affix"`                 // Tab 固定
		DynamicLevel       uint64         `db:"dynamic_level"`         // T能打开的子TAB数
		RealPath           string         `db:"real_path"`             // 菜单路由不包含参数部分
		ParentId           uint64         `db:"parent_id"`             // 父菜单ID
		CreatedAt          time.Time      `db:"created_at"`            // 创建时间
		UpdatedAt          time.Time      `db:"updated_at"`            // 修改时间
		DeletedAt          sql.NullTime   `db:"deleted_at"`            // 软删除时间
	}
)

func newSysMenusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysMenusModel {
	return &defaultSysMenusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_menus`",
	}
}

func (m *defaultSysMenusModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastSysMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusIdPrefix, id)
	goZeroFastSysMenusNameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusNamePrefix, data.Name)
	goZeroFastSysMenusPathKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusPathPrefix, data.Path)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysMenusIdKey, goZeroFastSysMenusNameKey, goZeroFastSysMenusPathKey)
	return err
}

func (m *defaultSysMenusModel) FindOne(ctx context.Context, id int64) (*SysMenus, error) {
	goZeroFastSysMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusIdPrefix, id)
	var resp SysMenus
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysMenusIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenusModel) FindOneByName(ctx context.Context, name string) (*SysMenus, error) {
	goZeroFastSysMenusNameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusNamePrefix, name)
	var resp SysMenus
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysMenusNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", sysMenusRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenusModel) FindOneByPath(ctx context.Context, path string) (*SysMenus, error) {
	goZeroFastSysMenusPathKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusPathPrefix, path)
	var resp SysMenus
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysMenusPathKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `path` = ? limit 1", sysMenusRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, path); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenusModel) Insert(ctx context.Context, data *SysMenus) (sql.Result, error) {
	goZeroFastSysMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusIdPrefix, data.Id)
	goZeroFastSysMenusNameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusNamePrefix, data.Name)
	goZeroFastSysMenusPathKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusPathPrefix, data.Path)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sort, data.MenuLevel, data.MenuType, data.Path, data.Name, data.Redirect, data.Component, data.Disabled, data.ServiceName, data.Permission, data.Title, data.Icon, data.HideMenu, data.HideBreadcrumb, data.IgnoreKeepAlive, data.HideTab, data.FrameSrc, data.CarryParam, data.HideChildrenInMenu, data.Affix, data.DynamicLevel, data.RealPath, data.ParentId, data.DeletedAt)
	}, goZeroFastSysMenusIdKey, goZeroFastSysMenusNameKey, goZeroFastSysMenusPathKey)
	return ret, err
}

func (m *defaultSysMenusModel) Update(ctx context.Context, newData *SysMenus) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastSysMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusIdPrefix, data.Id)
	goZeroFastSysMenusNameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusNamePrefix, data.Name)
	goZeroFastSysMenusPathKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusPathPrefix, data.Path)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Sort, newData.MenuLevel, newData.MenuType, newData.Path, newData.Name, newData.Redirect, newData.Component, newData.Disabled, newData.ServiceName, newData.Permission, newData.Title, newData.Icon, newData.HideMenu, newData.HideBreadcrumb, newData.IgnoreKeepAlive, newData.HideTab, newData.FrameSrc, newData.CarryParam, newData.HideChildrenInMenu, newData.Affix, newData.DynamicLevel, newData.RealPath, newData.ParentId, newData.DeletedAt, newData.Id)
	}, goZeroFastSysMenusIdKey, goZeroFastSysMenusNameKey, goZeroFastSysMenusPathKey)
	return err
}

func (m *defaultSysMenusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysMenusIdPrefix, primary)
}

func (m *defaultSysMenusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenusModel) tableName() string {
	return m.table
}
