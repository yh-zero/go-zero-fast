// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleMenusFieldNames          = builder.RawFieldNames(&RoleMenus{})
	roleMenusRows                = strings.Join(roleMenusFieldNames, ",")
	roleMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(roleMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(roleMenusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastRoleMenusIdPrefix           = "cache:goZeroFast:roleMenus:id:"
	cacheGoZeroFastRoleMenusRoleIdMenuIdPrefix = "cache:goZeroFast:roleMenus:roleId:menuId:"
)

type (
	roleMenusModel interface {
		Insert(ctx context.Context, data *RoleMenus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleMenus, error)
		FindOneByRoleIdMenuId(ctx context.Context, roleId uint64, menuId uint64) (*RoleMenus, error)
		Update(ctx context.Context, data *RoleMenus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleMenusModel struct {
		sqlc.CachedConn
		table string
	}

	RoleMenus struct {
		Id        int64     `db:"id"`         // id
		RoleId    uint64    `db:"role_id"`    // 角色id
		MenuId    uint64    `db:"menu_id"`    // 用户对应的菜单id
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newRoleMenusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultRoleMenusModel {
	return &defaultRoleMenusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`role_menus`",
	}
}

func (m *defaultRoleMenusModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastRoleMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastRoleMenusIdPrefix, id)
	goZeroFastRoleMenusRoleIdMenuIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastRoleMenusRoleIdMenuIdPrefix, data.RoleId, data.MenuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastRoleMenusIdKey, goZeroFastRoleMenusRoleIdMenuIdKey)
	return err
}

func (m *defaultRoleMenusModel) FindOne(ctx context.Context, id int64) (*RoleMenus, error) {
	goZeroFastRoleMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastRoleMenusIdPrefix, id)
	var resp RoleMenus
	err := m.QueryRowCtx(ctx, &resp, goZeroFastRoleMenusIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleMenusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleMenusModel) FindOneByRoleIdMenuId(ctx context.Context, roleId uint64, menuId uint64) (*RoleMenus, error) {
	goZeroFastRoleMenusRoleIdMenuIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastRoleMenusRoleIdMenuIdPrefix, roleId, menuId)
	var resp RoleMenus
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastRoleMenusRoleIdMenuIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `role_id` = ? and `menu_id` = ? limit 1", roleMenusRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, roleId, menuId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleMenusModel) Insert(ctx context.Context, data *RoleMenus) (sql.Result, error) {
	goZeroFastRoleMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastRoleMenusIdPrefix, data.Id)
	goZeroFastRoleMenusRoleIdMenuIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastRoleMenusRoleIdMenuIdPrefix, data.RoleId, data.MenuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, roleMenusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.MenuId)
	}, goZeroFastRoleMenusIdKey, goZeroFastRoleMenusRoleIdMenuIdKey)
	return ret, err
}

func (m *defaultRoleMenusModel) Update(ctx context.Context, newData *RoleMenus) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastRoleMenusIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastRoleMenusIdPrefix, data.Id)
	goZeroFastRoleMenusRoleIdMenuIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastRoleMenusRoleIdMenuIdPrefix, data.RoleId, data.MenuId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleMenusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RoleId, newData.MenuId, newData.Id)
	}, goZeroFastRoleMenusIdKey, goZeroFastRoleMenusRoleIdMenuIdKey)
	return err
}

func (m *defaultRoleMenusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastRoleMenusIdPrefix, primary)
}

func (m *defaultRoleMenusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleMenusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleMenusModel) tableName() string {
	return m.table
}
