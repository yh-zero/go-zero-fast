// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDepartmentsFieldNames          = builder.RawFieldNames(&SysDepartments{})
	sysDepartmentsRows                = strings.Join(sysDepartmentsFieldNames, ",")
	sysDepartmentsRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDepartmentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysDepartmentsRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDepartmentsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysDepartmentsIdPrefix = "cache:goZeroFast:sysDepartments:id:"
)

type (
	sysDepartmentsModel interface {
		Insert(ctx context.Context, data *SysDepartments) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysDepartments, error)
		Update(ctx context.Context, data *SysDepartments) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysDepartmentsModel struct {
		sqlc.CachedConn
		table string
	}

	SysDepartments struct {
		Id        uint64         `db:"id"`         // 部门id-自增
		Status    uint64         `db:"status"`     // 状态:1正常/2禁用
		Sort      uint64         `db:"sort"`       // 排序编号
		Name      string         `db:"name"`       // 部门名称
		ParentId  uint64         `db:"parent_id"`  // 父级部门ID 0预留是一级部门
		Ancestors sql.NullString `db:"ancestors"`  // 父级列表-预留
		Leader    sql.NullString `db:"leader"`     // 部门负责人
		Phone     sql.NullString `db:"phone"`      // 负责人电话
		Email     sql.NullString `db:"email"`      // 部门负责人电子邮箱
		Remark    sql.NullString `db:"remark"`     // 备注
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 修改时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 软删除时间
	}
)

func newSysDepartmentsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysDepartmentsModel {
	return &defaultSysDepartmentsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_departments`",
	}
}

func (m *defaultSysDepartmentsModel) Delete(ctx context.Context, id uint64) error {
	goZeroFastSysDepartmentsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysDepartmentsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysDepartmentsIdKey)
	return err
}

func (m *defaultSysDepartmentsModel) FindOne(ctx context.Context, id uint64) (*SysDepartments, error) {
	goZeroFastSysDepartmentsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysDepartmentsIdPrefix, id)
	var resp SysDepartments
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysDepartmentsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDepartmentsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDepartmentsModel) Insert(ctx context.Context, data *SysDepartments) (sql.Result, error) {
	goZeroFastSysDepartmentsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysDepartmentsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysDepartmentsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Status, data.Sort, data.Name, data.ParentId, data.Ancestors, data.Leader, data.Phone, data.Email, data.Remark, data.DeletedAt)
	}, goZeroFastSysDepartmentsIdKey)
	return ret, err
}

func (m *defaultSysDepartmentsModel) Update(ctx context.Context, data *SysDepartments) error {
	goZeroFastSysDepartmentsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysDepartmentsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDepartmentsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Status, data.Sort, data.Name, data.ParentId, data.Ancestors, data.Leader, data.Phone, data.Email, data.Remark, data.DeletedAt, data.Id)
	}, goZeroFastSysDepartmentsIdKey)
	return err
}

func (m *defaultSysDepartmentsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysDepartmentsIdPrefix, primary)
}

func (m *defaultSysDepartmentsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDepartmentsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDepartmentsModel) tableName() string {
	return m.table
}
