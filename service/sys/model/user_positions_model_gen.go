// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPositionsFieldNames          = builder.RawFieldNames(&UserPositions{})
	userPositionsRows                = strings.Join(userPositionsFieldNames, ",")
	userPositionsRowsExpectAutoSet   = strings.Join(stringx.Remove(userPositionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userPositionsRowsWithPlaceHolder = strings.Join(stringx.Remove(userPositionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastUserPositionsIdPrefix               = "cache:goZeroFast:userPositions:id:"
	cacheGoZeroFastUserPositionsUserIdPositionIdPrefix = "cache:goZeroFast:userPositions:userId:positionId:"
)

type (
	userPositionsModel interface {
		Insert(ctx context.Context, data *UserPositions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserPositions, error)
		FindOneByUserIdPositionId(ctx context.Context, userId uint64, positionId uint64) (*UserPositions, error)
		Update(ctx context.Context, data *UserPositions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserPositionsModel struct {
		sqlc.CachedConn
		table string
	}

	UserPositions struct {
		Id         int64  `db:"id"`          // id
		UserId     uint64 `db:"user_id"`     // 用户id
		PositionId uint64 `db:"position_id"` // 用户对应的职位id
	}
)

func newUserPositionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserPositionsModel {
	return &defaultUserPositionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_positions`",
	}
}

func (m *defaultUserPositionsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastUserPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastUserPositionsIdPrefix, id)
	goZeroFastUserPositionsUserIdPositionIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastUserPositionsUserIdPositionIdPrefix, data.UserId, data.PositionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastUserPositionsIdKey, goZeroFastUserPositionsUserIdPositionIdKey)
	return err
}

func (m *defaultUserPositionsModel) FindOne(ctx context.Context, id int64) (*UserPositions, error) {
	goZeroFastUserPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastUserPositionsIdPrefix, id)
	var resp UserPositions
	err := m.QueryRowCtx(ctx, &resp, goZeroFastUserPositionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPositionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPositionsModel) FindOneByUserIdPositionId(ctx context.Context, userId uint64, positionId uint64) (*UserPositions, error) {
	goZeroFastUserPositionsUserIdPositionIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastUserPositionsUserIdPositionIdPrefix, userId, positionId)
	var resp UserPositions
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastUserPositionsUserIdPositionIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `position_id` = ? limit 1", userPositionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, positionId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPositionsModel) Insert(ctx context.Context, data *UserPositions) (sql.Result, error) {
	goZeroFastUserPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastUserPositionsIdPrefix, data.Id)
	goZeroFastUserPositionsUserIdPositionIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastUserPositionsUserIdPositionIdPrefix, data.UserId, data.PositionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userPositionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.PositionId)
	}, goZeroFastUserPositionsIdKey, goZeroFastUserPositionsUserIdPositionIdKey)
	return ret, err
}

func (m *defaultUserPositionsModel) Update(ctx context.Context, newData *UserPositions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastUserPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastUserPositionsIdPrefix, data.Id)
	goZeroFastUserPositionsUserIdPositionIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroFastUserPositionsUserIdPositionIdPrefix, data.UserId, data.PositionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userPositionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.PositionId, newData.Id)
	}, goZeroFastUserPositionsIdKey, goZeroFastUserPositionsUserIdPositionIdKey)
	return err
}

func (m *defaultUserPositionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastUserPositionsIdPrefix, primary)
}

func (m *defaultUserPositionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPositionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserPositionsModel) tableName() string {
	return m.table
}
