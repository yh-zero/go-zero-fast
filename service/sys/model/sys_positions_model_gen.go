// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysPositionsFieldNames          = builder.RawFieldNames(&SysPositions{})
	sysPositionsRows                = strings.Join(sysPositionsFieldNames, ",")
	sysPositionsRowsExpectAutoSet   = strings.Join(stringx.Remove(sysPositionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysPositionsRowsWithPlaceHolder = strings.Join(stringx.Remove(sysPositionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysPositionsIdPrefix   = "cache:goZeroFast:sysPositions:id:"
	cacheGoZeroFastSysPositionsCodePrefix = "cache:goZeroFast:sysPositions:code:"
)

type (
	sysPositionsModel interface {
		Insert(ctx context.Context, data *SysPositions) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysPositions, error)
		FindOneByCode(ctx context.Context, code uint64) (*SysPositions, error)
		Update(ctx context.Context, data *SysPositions) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysPositionsModel struct {
		sqlc.CachedConn
		table string
	}

	SysPositions struct {
		Id        uint64         `db:"id"`         // id
		Status    uint64         `db:"status"`     // 状态:1正常/2禁用
		Sort      uint64         `db:"sort"`       // 排序编号
		Name      string         `db:"name"`       // 职位名称
		Code      uint64         `db:"code"`       // 职位编码
		Remark    sql.NullString `db:"remark"`     // 备注
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 修改时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 软删除时间
	}
)

func newSysPositionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysPositionsModel {
	return &defaultSysPositionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_positions`",
	}
}

func (m *defaultSysPositionsModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastSysPositionsCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsCodePrefix, data.Code)
	goZeroFastSysPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysPositionsCodeKey, goZeroFastSysPositionsIdKey)
	return err
}

func (m *defaultSysPositionsModel) FindOne(ctx context.Context, id uint64) (*SysPositions, error) {
	goZeroFastSysPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsIdPrefix, id)
	var resp SysPositions
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysPositionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysPositionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysPositionsModel) FindOneByCode(ctx context.Context, code uint64) (*SysPositions, error) {
	goZeroFastSysPositionsCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsCodePrefix, code)
	var resp SysPositions
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysPositionsCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", sysPositionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysPositionsModel) Insert(ctx context.Context, data *SysPositions) (sql.Result, error) {
	goZeroFastSysPositionsCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsCodePrefix, data.Code)
	goZeroFastSysPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysPositionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Status, data.Sort, data.Name, data.Code, data.Remark, data.DeletedAt)
	}, goZeroFastSysPositionsCodeKey, goZeroFastSysPositionsIdKey)
	return ret, err
}

func (m *defaultSysPositionsModel) Update(ctx context.Context, newData *SysPositions) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastSysPositionsCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsCodePrefix, data.Code)
	goZeroFastSysPositionsIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysPositionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Status, newData.Sort, newData.Name, newData.Code, newData.Remark, newData.DeletedAt, newData.Id)
	}, goZeroFastSysPositionsCodeKey, goZeroFastSysPositionsIdKey)
	return err
}

func (m *defaultSysPositionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysPositionsIdPrefix, primary)
}

func (m *defaultSysPositionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysPositionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysPositionsModel) tableName() string {
	return m.table
}
