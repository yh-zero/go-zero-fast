// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUsersFieldNames          = builder.RawFieldNames(&SysUsers{})
	sysUsersRows                = strings.Join(sysUsersFieldNames, ",")
	sysUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUsersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysUsersIdPrefix       = "cache:goZeroFast:sysUsers:id:"
	cacheGoZeroFastSysUsersNicknamePrefix = "cache:goZeroFast:sysUsers:nickname:"
	cacheGoZeroFastSysUsersUsernamePrefix = "cache:goZeroFast:sysUsers:username:"
)

type (
	sysUsersModel interface {
		Insert(ctx context.Context, data *SysUsers) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysUsers, error)
		FindOneByNickname(ctx context.Context, nickname string) (*SysUsers, error)
		FindOneByUsername(ctx context.Context, username string) (*SysUsers, error)
		Update(ctx context.Context, data *SysUsers) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysUsersModel struct {
		sqlc.CachedConn
		table string
	}

	SysUsers struct {
		Id           uint64         `db:"id"`            // 雪花算法ID（64位整型）
		Status       uint64         `db:"status"`        // 状态:1正常/2禁用
		Username     string         `db:"username"`      // 登录名
		Password     string         `db:"password"`      // 密码（bcrypt加密）
		Nickname     string         `db:"nickname"`      // 昵称
		Description  sql.NullString `db:"description"`   // 个人简介
		HomePath     string         `db:"home_path"`     // 登录首页
		Mobile       sql.NullString `db:"mobile"`        // AES加密手机号
		Email        sql.NullString `db:"email"`         // AES加密邮箱
		Avatar       sql.NullString `db:"avatar"`        // 头像URL
		DepartmentId uint64         `db:"department_id"` // 部门ID
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 修改时间
		DeletedAt    sql.NullTime   `db:"deleted_at"`    // 软删除时间
	}
)

func newSysUsersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysUsersModel {
	return &defaultSysUsersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_users`",
	}
}

func (m *defaultSysUsersModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastSysUsersIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersIdPrefix, id)
	goZeroFastSysUsersNicknameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersNicknamePrefix, data.Nickname)
	goZeroFastSysUsersUsernameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysUsersIdKey, goZeroFastSysUsersNicknameKey, goZeroFastSysUsersUsernameKey)
	return err
}

func (m *defaultSysUsersModel) FindOne(ctx context.Context, id uint64) (*SysUsers, error) {
	goZeroFastSysUsersIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersIdPrefix, id)
	var resp SysUsers
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUsersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUsersModel) FindOneByNickname(ctx context.Context, nickname string) (*SysUsers, error) {
	goZeroFastSysUsersNicknameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersNicknamePrefix, nickname)
	var resp SysUsers
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysUsersNicknameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `nickname` = ? limit 1", sysUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, nickname); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUsersModel) FindOneByUsername(ctx context.Context, username string) (*SysUsers, error) {
	goZeroFastSysUsersUsernameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersUsernamePrefix, username)
	var resp SysUsers
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", sysUsersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUsersModel) Insert(ctx context.Context, data *SysUsers) (sql.Result, error) {
	goZeroFastSysUsersIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersIdPrefix, data.Id)
	goZeroFastSysUsersNicknameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersNicknamePrefix, data.Nickname)
	goZeroFastSysUsersUsernameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUsersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Status, data.Username, data.Password, data.Nickname, data.Description, data.HomePath, data.Mobile, data.Email, data.Avatar, data.DepartmentId, data.DeletedAt)
	}, goZeroFastSysUsersIdKey, goZeroFastSysUsersNicknameKey, goZeroFastSysUsersUsernameKey)
	return ret, err
}

func (m *defaultSysUsersModel) Update(ctx context.Context, newData *SysUsers) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastSysUsersIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersIdPrefix, data.Id)
	goZeroFastSysUsersNicknameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersNicknamePrefix, data.Nickname)
	goZeroFastSysUsersUsernameKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUsersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Status, newData.Username, newData.Password, newData.Nickname, newData.Description, newData.HomePath, newData.Mobile, newData.Email, newData.Avatar, newData.DepartmentId, newData.DeletedAt, newData.Id)
	}, goZeroFastSysUsersIdKey, goZeroFastSysUsersNicknameKey, goZeroFastSysUsersUsernameKey)
	return err
}

func (m *defaultSysUsersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysUsersIdPrefix, primary)
}

func (m *defaultSysUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUsersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUsersModel) tableName() string {
	return m.table
}
