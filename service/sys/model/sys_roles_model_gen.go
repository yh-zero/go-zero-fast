// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRolesFieldNames          = builder.RawFieldNames(&SysRoles{})
	sysRolesRows                = strings.Join(sysRolesFieldNames, ",")
	sysRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRolesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRolesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGoZeroFastSysRolesIdPrefix   = "cache:goZeroFast:sysRoles:id:"
	cacheGoZeroFastSysRolesCodePrefix = "cache:goZeroFast:sysRoles:code:"
)

type (
	sysRolesModel interface {
		Insert(ctx context.Context, data *SysRoles) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysRoles, error)
		FindOneByCode(ctx context.Context, code string) (*SysRoles, error)
		Update(ctx context.Context, data *SysRoles) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysRolesModel struct {
		sqlc.CachedConn
		table string
	}

	SysRoles struct {
		Id            uint64    `db:"id"`             // 雪花算法ID（64位整型）
		Status        uint64    `db:"status"`         // 状态:1正常/2禁用
		Name          string    `db:"name"`           // 角色名
		Code          string    `db:"code"`           // 角色码，用于前端权限控制
		DefaultRouter string    `db:"default_router"` // 默认登录页面
		Remark        string    `db:"remark"`         // 备注
		Sort          uint64    `db:"sort"`           // 排序编号
		CreatedAt     time.Time `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time `db:"updated_at"`     // 修改时间
	}
)

func newSysRolesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysRolesModel {
	return &defaultSysRolesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_roles`",
	}
}

func (m *defaultSysRolesModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroFastSysRolesCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesCodePrefix, data.Code)
	goZeroFastSysRolesIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroFastSysRolesCodeKey, goZeroFastSysRolesIdKey)
	return err
}

func (m *defaultSysRolesModel) FindOne(ctx context.Context, id uint64) (*SysRoles, error) {
	goZeroFastSysRolesIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesIdPrefix, id)
	var resp SysRoles
	err := m.QueryRowCtx(ctx, &resp, goZeroFastSysRolesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRolesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRolesModel) FindOneByCode(ctx context.Context, code string) (*SysRoles, error) {
	goZeroFastSysRolesCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesCodePrefix, code)
	var resp SysRoles
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroFastSysRolesCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", sysRolesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRolesModel) Insert(ctx context.Context, data *SysRoles) (sql.Result, error) {
	goZeroFastSysRolesCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesCodePrefix, data.Code)
	goZeroFastSysRolesIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysRolesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Status, data.Name, data.Code, data.DefaultRouter, data.Remark, data.Sort)
	}, goZeroFastSysRolesCodeKey, goZeroFastSysRolesIdKey)
	return ret, err
}

func (m *defaultSysRolesModel) Update(ctx context.Context, newData *SysRoles) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	goZeroFastSysRolesCodeKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesCodePrefix, data.Code)
	goZeroFastSysRolesIdKey := fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRolesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Status, newData.Name, newData.Code, newData.DefaultRouter, newData.Remark, newData.Sort, newData.Id)
	}, goZeroFastSysRolesCodeKey, goZeroFastSysRolesIdKey)
	return err
}

func (m *defaultSysRolesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGoZeroFastSysRolesIdPrefix, primary)
}

func (m *defaultSysRolesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRolesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysRolesModel) tableName() string {
	return m.table
}

