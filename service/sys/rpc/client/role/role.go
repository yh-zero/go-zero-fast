// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: sys.proto

package role

import (
	"context"

	"go-zero-fast/service/sys/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IDRequest         = pb.IDRequest
	IDsRequest        = pb.IDsRequest
	MenuInfo          = pb.MenuInfo
	MenuInfoList      = pb.MenuInfoList
	Meta              = pb.Meta
	Model             = pb.Model
	NoDataResponse    = pb.NoDataResponse
	PageInfo          = pb.PageInfo
	RoleInfo          = pb.RoleInfo
	RoleListRequest   = pb.RoleListRequest
	RoleListResponse  = pb.RoleListResponse
	RoleUpdateRequest = pb.RoleUpdateRequest
	TokenInfo         = pb.TokenInfo
	TokenInfoRequest  = pb.TokenInfoRequest
	TokenInfoResponse = pb.TokenInfoResponse
	UserInfo          = pb.UserInfo
	UserInfoResponse  = pb.UserInfoResponse
	UsernameRequest   = pb.UsernameRequest
	UsernameResponse  = pb.UsernameResponse

	Role interface {
		// 获取角色列表
		GetRoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error)
		// 创建新角色
		CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*NoDataResponse, error)
		// 删除角色信息
		DeleteRole(ctx context.Context, in *IDsRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
		// 更新角色
		UpdateRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
		// 通过ID获取角色
		GetRoleById(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	}

	defaultRole struct {
		cli zrpc.Client
	}
)

func NewRole(cli zrpc.Client) Role {
	return &defaultRole{
		cli: cli,
	}
}

// 获取角色列表
func (m *defaultRole) GetRoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.GetRoleList(ctx, in, opts...)
}

// 创建新角色
func (m *defaultRole) CreateRole(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*NoDataResponse, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

// 删除角色信息
func (m *defaultRole) DeleteRole(ctx context.Context, in *IDsRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

// 更新角色
func (m *defaultRole) UpdateRole(ctx context.Context, in *RoleUpdateRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

// 通过ID获取角色
func (m *defaultRole) GetRoleById(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	client := pb.NewRoleClient(m.cli.Conn())
	return client.GetRoleById(ctx, in, opts...)
}
